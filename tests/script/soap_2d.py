
# -*- coding: utf-8 -*-
"""SOAP_2D.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17EOlWoDiq_5gg5_X_QR0IMMOLkX7Nmtk
"""

import numpy as np
import scipy.integrate as integrate
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


def gaussian_fun_alt_2D(sigma_2D, relative_distances_2D):
    # NB: r must be an array
    relative_xs = relative_distances_2D[:, 0]
    relative_ys = relative_distances_2D[:, 1]

    return lambda x, y: np.exp(1 / (-2 * sigma_2D[0] ** 2) * (x - relative_xs[:, np.newaxis, np.newaxis]) ** 2
                               + 1 / (-2 * sigma_2D[1] ** 2) * (y - relative_ys[:, np.newaxis, np.newaxis]) ** 2)


def trans_invariant_density_alt_2D(atom_positions, sigma_2D, r_cutoff=np.inf, origin_index=0):
    relative_distances_2D = atom_positions - atom_positions[
        origin_index]  # shape = (N, 2), N means #atoms, 2 means relative distance of (x and y)
    density = gaussian_fun_alt_2D(sigma_2D, relative_distances_2D)
    return lambda x, y: np.sum(density(x, y), axis=0)


def plotContour(xyz_data_2D, title, color_label, image_size_inches=(6.4, 4.8), save_fig=False, fig_name="2D_contour"):
    X, Y, Z = xyz_data_2D
    plt.figure(figsize=image_size_inches)
    contour = plt.contour(X, Y, Z, levels=20, cmap="coolwarm")
    plt.clabel(contour, inline=True, fontsize=8)
    plt.xlabel("x")
    plt.ylabel("y")
    # plt.title("2D invariant gaussian functions density")
    plt.title(title)

    # plt.colorbar(label="2D Density")
    plt.colorbar(label=color_label)

    # ax = plt.gca()
    if save_fig:
        plt.savefig(fig_name, dpi=300)
    plt.show()


if __name__ == "__main__":
    R_x = np.linspace(-100, 100, 1000)
    R_y = np.linspace(-100, 100, 1000)
    xv, yv = np.meshgrid(R_x, R_y)

    T_2D = np.array([600, 600])
    ############################  x    y
    atom_2D_position = np.array([[60, 60],
                                 [-60, -60],
                                 [-10, 20]])
    density_function_2D = trans_invariant_density_alt_2D(atom_2D_position + T_2D, np.array([10, 20]))

    # the shape should be (len(R_x), len(R_y))
    result = density_function_2D(xv, yv)
    print(f'the shape is {result.shape}')

    # Create 3D plot
    fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
    ax.plot_surface(xv, yv, result, cmap='viridis', edgecolor='none')

    # Labels
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Density')
    ax.set_title('2D Gaussian Density Plot')
    plt.show()

    plotContour(xyz_data_2D=(xv, yv, result), title="2D invariant gaussian functions density", color_label="2D Density",
                save_fig=True, fig_name="2D_contour_1")

    R_x = np.linspace(-5, 5, 500)
    R_y = np.linspace(-5, 5, 500)
    xv, yv = np.meshgrid(R_x, R_y)

    T_2D = np.array([0.1, 0.1])
    ############################  x    y
    atom_2D_position = np.array([[0, 0],
                                 [2, 2],
                                 [-3, -3]])
    density_function_2D = trans_invariant_density_alt_2D(atom_2D_position + T_2D, np.array([1, 1]))

    # the shape should be (len(R_x), len(R_y))
    result = density_function_2D(xv, yv)
    print(f'the shape is {result.shape}')

    # Create 3D plot
    fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
    ax.plot_surface(xv, yv, result, cmap='viridis', edgecolor='none')

    # Labels
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Density')
    ax.set_title('2D Gaussian Density Plot')
    plt.savefig("2D_denstity")
    plt.show()
    plotContour(xyz_data_2D=(xv, yv, result), title="2D invariant gaussian functions density", color_label="2D Density",
                save_fig=True, fig_name="2D_contour_2")

# relative_distances_2D  = atom_2D_position - atom_2D_position[0]  # shape = (N, 2), N means #atoms, 2 means relative distance of (x and y)
# relative_xs = relative_distances_2D[:, 0:1]

# relative_xs = xv - relative_xs[:, np.newaxis, :]

# print(relative_xs.shape)

# print(relative_xs)

# relative_distances_2D  = atom_2D_position - atom_2D_position[0]  # shape = (N, 2), N means #atoms, 2 means relative distance of (x and y)
# relative_xs = relative_distances_2D[:, 1:2]

# relative_xs = yv - relative_xs[:, np.newaxis, :]

# print(relative_xs.shape)

# print(relative_xs)


# print(density_function_2D(xv, yv))


